// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_image_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_image_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_image_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_image_2eproto;
class NLImage;
struct NLImageDefaultTypeInternal;
extern NLImageDefaultTypeInternal _NLImage_default_instance_;
class NLImageRotateRequest;
struct NLImageRotateRequestDefaultTypeInternal;
extern NLImageRotateRequestDefaultTypeInternal _NLImageRotateRequest_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum NLImageRotateRequest_Rotation : int {
  NLImageRotateRequest_Rotation_NONE = 0,
  NLImageRotateRequest_Rotation_NINETY_DEG = 1,
  NLImageRotateRequest_Rotation_ONE_EIGHTY_DEG = 2,
  NLImageRotateRequest_Rotation_TWO_SEVENTY_DEG = 3,
  NLImageRotateRequest_Rotation_NLImageRotateRequest_Rotation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NLImageRotateRequest_Rotation_NLImageRotateRequest_Rotation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NLImageRotateRequest_Rotation_IsValid(int value);
extern const uint32_t NLImageRotateRequest_Rotation_internal_data_[];
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest_Rotation_Rotation_MIN = static_cast<NLImageRotateRequest_Rotation>(0);
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest_Rotation_Rotation_MAX = static_cast<NLImageRotateRequest_Rotation>(3);
constexpr int NLImageRotateRequest_Rotation_Rotation_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
NLImageRotateRequest_Rotation_descriptor();
template <typename T>
const std::string& NLImageRotateRequest_Rotation_Name(T value) {
  static_assert(std::is_same<T, NLImageRotateRequest_Rotation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Rotation_Name().");
  return NLImageRotateRequest_Rotation_Name(static_cast<NLImageRotateRequest_Rotation>(value));
}
template <>
inline const std::string& NLImageRotateRequest_Rotation_Name(NLImageRotateRequest_Rotation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NLImageRotateRequest_Rotation_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool NLImageRotateRequest_Rotation_Parse(absl::string_view name, NLImageRotateRequest_Rotation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NLImageRotateRequest_Rotation>(
      NLImageRotateRequest_Rotation_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NLImage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLImage) */ {
 public:
  inline NLImage() : NLImage(nullptr) {}
  ~NLImage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NLImage(::google::protobuf::internal::ConstantInitialized);

  inline NLImage(const NLImage& from)
      : NLImage(nullptr, from) {}
  NLImage(NLImage&& from) noexcept
    : NLImage() {
    *this = ::std::move(from);
  }

  inline NLImage& operator=(const NLImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLImage& operator=(NLImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NLImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLImage* internal_default_instance() {
    return reinterpret_cast<const NLImage*>(
               &_NLImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NLImage& a, NLImage& b) {
    a.Swap(&b);
  }
  inline void Swap(NLImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLImage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NLImage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NLImage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NLImage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NLImage& from) {
    NLImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NLImage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NLImage";
  }
  protected:
  explicit NLImage(::google::protobuf::Arena* arena);
  NLImage(::google::protobuf::Arena* arena, const NLImage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kColorFieldNumber = 1,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // bool color = 1;
  void clear_color() ;
  bool color() const;
  void set_color(bool value);

  private:
  bool _internal_color() const;
  void _internal_set_color(bool value);

  public:
  // int32 width = 3;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 4;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NLImage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    bool color_;
    ::int32_t width_;
    ::int32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_2eproto;
};// -------------------------------------------------------------------

class NLImageRotateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLImageRotateRequest) */ {
 public:
  inline NLImageRotateRequest() : NLImageRotateRequest(nullptr) {}
  ~NLImageRotateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NLImageRotateRequest(::google::protobuf::internal::ConstantInitialized);

  inline NLImageRotateRequest(const NLImageRotateRequest& from)
      : NLImageRotateRequest(nullptr, from) {}
  NLImageRotateRequest(NLImageRotateRequest&& from) noexcept
    : NLImageRotateRequest() {
    *this = ::std::move(from);
  }

  inline NLImageRotateRequest& operator=(const NLImageRotateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLImageRotateRequest& operator=(NLImageRotateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NLImageRotateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NLImageRotateRequest* internal_default_instance() {
    return reinterpret_cast<const NLImageRotateRequest*>(
               &_NLImageRotateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NLImageRotateRequest& a, NLImageRotateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NLImageRotateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NLImageRotateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NLImageRotateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NLImageRotateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NLImageRotateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NLImageRotateRequest& from) {
    NLImageRotateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NLImageRotateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NLImageRotateRequest";
  }
  protected:
  explicit NLImageRotateRequest(::google::protobuf::Arena* arena);
  NLImageRotateRequest(::google::protobuf::Arena* arena, const NLImageRotateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Rotation = NLImageRotateRequest_Rotation;
  static constexpr Rotation NONE = NLImageRotateRequest_Rotation_NONE;
  static constexpr Rotation NINETY_DEG = NLImageRotateRequest_Rotation_NINETY_DEG;
  static constexpr Rotation ONE_EIGHTY_DEG = NLImageRotateRequest_Rotation_ONE_EIGHTY_DEG;
  static constexpr Rotation TWO_SEVENTY_DEG = NLImageRotateRequest_Rotation_TWO_SEVENTY_DEG;
  static inline bool Rotation_IsValid(int value) {
    return NLImageRotateRequest_Rotation_IsValid(value);
  }
  static constexpr Rotation Rotation_MIN = NLImageRotateRequest_Rotation_Rotation_MIN;
  static constexpr Rotation Rotation_MAX = NLImageRotateRequest_Rotation_Rotation_MAX;
  static constexpr int Rotation_ARRAYSIZE = NLImageRotateRequest_Rotation_Rotation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Rotation_descriptor() {
    return NLImageRotateRequest_Rotation_descriptor();
  }
  template <typename T>
  static inline const std::string& Rotation_Name(T value) {
    return NLImageRotateRequest_Rotation_Name(value);
  }
  static inline bool Rotation_Parse(absl::string_view name, Rotation* value) {
    return NLImageRotateRequest_Rotation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kRotationFieldNumber = 1,
  };
  // .NLImage image = 2;
  bool has_image() const;
  void clear_image() ;
  const ::NLImage& image() const;
  PROTOBUF_NODISCARD ::NLImage* release_image();
  ::NLImage* mutable_image();
  void set_allocated_image(::NLImage* value);
  void unsafe_arena_set_allocated_image(::NLImage* value);
  ::NLImage* unsafe_arena_release_image();

  private:
  const ::NLImage& _internal_image() const;
  ::NLImage* _internal_mutable_image();

  public:
  // .NLImageRotateRequest.Rotation rotation = 1;
  void clear_rotation() ;
  ::NLImageRotateRequest_Rotation rotation() const;
  void set_rotation(::NLImageRotateRequest_Rotation value);

  private:
  ::NLImageRotateRequest_Rotation _internal_rotation() const;
  void _internal_set_rotation(::NLImageRotateRequest_Rotation value);

  public:
  // @@protoc_insertion_point(class_scope:NLImageRotateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NLImage* image_;
    int rotation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NLImage

// bool color = 1;
inline void NLImage::clear_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.color_ = false;
}
inline bool NLImage::color() const {
  // @@protoc_insertion_point(field_get:NLImage.color)
  return _internal_color();
}
inline void NLImage::set_color(bool value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:NLImage.color)
}
inline bool NLImage::_internal_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.color_;
}
inline void NLImage::_internal_set_color(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.color_ = value;
}

// bytes data = 2;
inline void NLImage::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& NLImage::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NLImage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NLImage::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NLImage.data)
}
inline std::string* NLImage::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:NLImage.data)
  return _s;
}
inline const std::string& NLImage::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void NLImage::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* NLImage::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* NLImage::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NLImage.data)
  return _impl_.data_.Release();
}
inline void NLImage::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NLImage.data)
}

// int32 width = 3;
inline void NLImage::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
}
inline ::int32_t NLImage::width() const {
  // @@protoc_insertion_point(field_get:NLImage.width)
  return _internal_width();
}
inline void NLImage::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:NLImage.width)
}
inline ::int32_t NLImage::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void NLImage::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// int32 height = 4;
inline void NLImage::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
}
inline ::int32_t NLImage::height() const {
  // @@protoc_insertion_point(field_get:NLImage.height)
  return _internal_height();
}
inline void NLImage::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:NLImage.height)
}
inline ::int32_t NLImage::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void NLImage::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// NLImageRotateRequest

// .NLImageRotateRequest.Rotation rotation = 1;
inline void NLImageRotateRequest::clear_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotation_ = 0;
}
inline ::NLImageRotateRequest_Rotation NLImageRotateRequest::rotation() const {
  // @@protoc_insertion_point(field_get:NLImageRotateRequest.rotation)
  return _internal_rotation();
}
inline void NLImageRotateRequest::set_rotation(::NLImageRotateRequest_Rotation value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:NLImageRotateRequest.rotation)
}
inline ::NLImageRotateRequest_Rotation NLImageRotateRequest::_internal_rotation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NLImageRotateRequest_Rotation>(_impl_.rotation_);
}
inline void NLImageRotateRequest::_internal_set_rotation(::NLImageRotateRequest_Rotation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rotation_ = value;
}

// .NLImage image = 2;
inline bool NLImageRotateRequest::has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline void NLImageRotateRequest::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::NLImage& NLImageRotateRequest::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NLImage* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::NLImage&>(::_NLImage_default_instance_);
}
inline const ::NLImage& NLImageRotateRequest::image() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NLImageRotateRequest.image)
  return _internal_image();
}
inline void NLImageRotateRequest::unsafe_arena_set_allocated_image(::NLImage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = reinterpret_cast<::NLImage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NLImageRotateRequest.image)
}
inline ::NLImage* NLImageRotateRequest::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NLImage* released = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NLImage* NLImageRotateRequest::unsafe_arena_release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NLImageRotateRequest.image)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NLImage* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::NLImage* NLImageRotateRequest::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::NLImage>(GetArena());
    _impl_.image_ = reinterpret_cast<::NLImage*>(p);
  }
  return _impl_.image_;
}
inline ::NLImage* NLImageRotateRequest::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NLImage* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:NLImageRotateRequest.image)
  return _msg;
}
inline void NLImageRotateRequest::set_allocated_image(::NLImage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::NLImage*>(_impl_.image_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::NLImage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.image_ = reinterpret_cast<::NLImage*>(value);
  // @@protoc_insertion_point(field_set_allocated:NLImageRotateRequest.image)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::NLImageRotateRequest_Rotation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NLImageRotateRequest_Rotation>() {
  return ::NLImageRotateRequest_Rotation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_image_2eproto_2epb_2eh
