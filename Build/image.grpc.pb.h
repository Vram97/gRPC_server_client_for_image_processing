// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image.proto
#ifndef GRPC_image_2eproto__INCLUDED
#define GRPC_image_2eproto__INCLUDED

#include "image.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class NLImageService final {
 public:
  static constexpr char const* service_full_name() {
    return "NLImageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::NLImage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>> AsyncRotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>>(AsyncRotateImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>> PrepareAsyncRotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>>(PrepareAsyncRotateImageRaw(context, request, cq));
    }
    // A request to mean filter the given image and return the new filtered
    // image.  The mean filter can be computed for each pixel in an image by
    // taking the average of a pixel and all of its neighbors.  As an example,
    // if you have an image with 9 pixels:
    //   A B C
    //   D E F
    //   G H I
    // Then a few examples of pixels from the mean filter of this
    // image are:
    //    A_mean_filter = (A + B + E + D) / 4
    //    D_mean_filter = (D + A + B + E + G + H) / 6
    //    E_mean_filter = (E + A + B + C + D + F + G + H + I) / 9
    // For color images, the mean filter is the image with this filter
    // run on each of the 3 channels independently.
    virtual ::grpc::Status MeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::NLImage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>> AsyncMeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>>(AsyncMeanFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>> PrepareAsyncMeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>>(PrepareAsyncMeanFilterRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest* request, ::NLImage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest* request, ::NLImage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A request to mean filter the given image and return the new filtered
      // image.  The mean filter can be computed for each pixel in an image by
      // taking the average of a pixel and all of its neighbors.  As an example,
      // if you have an image with 9 pixels:
      //   A B C
      //   D E F
      //   G H I
      // Then a few examples of pixels from the mean filter of this
      // image are:
      //    A_mean_filter = (A + B + E + D) / 4
      //    D_mean_filter = (D + A + B + E + G + H) / 6
      //    E_mean_filter = (E + A + B + C + D + F + G + H + I) / 9
      // For color images, the mean filter is the image with this filter
      // run on each of the 3 channels independently.
      virtual void MeanFilter(::grpc::ClientContext* context, const ::NLImage* request, ::NLImage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MeanFilter(::grpc::ClientContext* context, const ::NLImage* request, ::NLImage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>* AsyncRotateImageRaw(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>* PrepareAsyncRotateImageRaw(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>* AsyncMeanFilterRaw(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NLImage>* PrepareAsyncMeanFilterRaw(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::NLImage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>> AsyncRotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>>(AsyncRotateImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>> PrepareAsyncRotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>>(PrepareAsyncRotateImageRaw(context, request, cq));
    }
    ::grpc::Status MeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::NLImage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>> AsyncMeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>>(AsyncMeanFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>> PrepareAsyncMeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NLImage>>(PrepareAsyncMeanFilterRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest* request, ::NLImage* response, std::function<void(::grpc::Status)>) override;
      void RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest* request, ::NLImage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MeanFilter(::grpc::ClientContext* context, const ::NLImage* request, ::NLImage* response, std::function<void(::grpc::Status)>) override;
      void MeanFilter(::grpc::ClientContext* context, const ::NLImage* request, ::NLImage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NLImage>* AsyncRotateImageRaw(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NLImage>* PrepareAsyncRotateImageRaw(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NLImage>* AsyncMeanFilterRaw(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NLImage>* PrepareAsyncMeanFilterRaw(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RotateImage_;
    const ::grpc::internal::RpcMethod rpcmethod_MeanFilter_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RotateImage(::grpc::ServerContext* context, const ::NLImageRotateRequest* request, ::NLImage* response);
    // A request to mean filter the given image and return the new filtered
    // image.  The mean filter can be computed for each pixel in an image by
    // taking the average of a pixel and all of its neighbors.  As an example,
    // if you have an image with 9 pixels:
    //   A B C
    //   D E F
    //   G H I
    // Then a few examples of pixels from the mean filter of this
    // image are:
    //    A_mean_filter = (A + B + E + D) / 4
    //    D_mean_filter = (D + A + B + E + G + H) / 6
    //    E_mean_filter = (E + A + B + C + D + F + G + H + I) / 9
    // For color images, the mean filter is the image with this filter
    // run on each of the 3 channels independently.
    virtual ::grpc::Status MeanFilter(::grpc::ServerContext* context, const ::NLImage* request, ::NLImage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RotateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RotateImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RotateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotateImage(::grpc::ServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotateImage(::grpc::ServerContext* context, ::NLImageRotateRequest* request, ::grpc::ServerAsyncResponseWriter< ::NLImage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MeanFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MeanFilter() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MeanFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MeanFilter(::grpc::ServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMeanFilter(::grpc::ServerContext* context, ::NLImage* request, ::grpc::ServerAsyncResponseWriter< ::NLImage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RotateImage<WithAsyncMethod_MeanFilter<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RotateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RotateImage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::NLImageRotateRequest, ::NLImage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NLImageRotateRequest* request, ::NLImage* response) { return this->RotateImage(context, request, response); }));}
    void SetMessageAllocatorFor_RotateImage(
        ::grpc::MessageAllocator< ::NLImageRotateRequest, ::NLImage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NLImageRotateRequest, ::NLImage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RotateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotateImage(::grpc::ServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RotateImage(
      ::grpc::CallbackServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MeanFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MeanFilter() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::NLImage, ::NLImage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NLImage* request, ::NLImage* response) { return this->MeanFilter(context, request, response); }));}
    void SetMessageAllocatorFor_MeanFilter(
        ::grpc::MessageAllocator< ::NLImage, ::NLImage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NLImage, ::NLImage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MeanFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MeanFilter(::grpc::ServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MeanFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RotateImage<WithCallbackMethod_MeanFilter<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RotateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RotateImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RotateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotateImage(::grpc::ServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MeanFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MeanFilter() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MeanFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MeanFilter(::grpc::ServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RotateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RotateImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RotateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotateImage(::grpc::ServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotateImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MeanFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MeanFilter() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MeanFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MeanFilter(::grpc::ServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMeanFilter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RotateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RotateImage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RotateImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_RotateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotateImage(::grpc::ServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RotateImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MeanFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MeanFilter() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MeanFilter(context, request, response); }));
    }
    ~WithRawCallbackMethod_MeanFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MeanFilter(::grpc::ServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MeanFilter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RotateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RotateImage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NLImageRotateRequest, ::NLImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NLImageRotateRequest, ::NLImage>* streamer) {
                       return this->StreamedRotateImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RotateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RotateImage(::grpc::ServerContext* /*context*/, const ::NLImageRotateRequest* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRotateImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NLImageRotateRequest,::NLImage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MeanFilter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MeanFilter() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NLImage, ::NLImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NLImage, ::NLImage>* streamer) {
                       return this->StreamedMeanFilter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MeanFilter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MeanFilter(::grpc::ServerContext* /*context*/, const ::NLImage* /*request*/, ::NLImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMeanFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NLImage,::NLImage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RotateImage<WithStreamedUnaryMethod_MeanFilter<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RotateImage<WithStreamedUnaryMethod_MeanFilter<Service > > StreamedService;
};


#endif  // GRPC_image_2eproto__INCLUDED
