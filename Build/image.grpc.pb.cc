// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image.proto

#include "image.pb.h"
#include "image.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* NLImageService_method_names[] = {
  "/NLImageService/RotateImage",
  "/NLImageService/MeanFilter",
};

std::unique_ptr< NLImageService::Stub> NLImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NLImageService::Stub> stub(new NLImageService::Stub(channel, options));
  return stub;
}

NLImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RotateImage_(NLImageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MeanFilter_(NLImageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NLImageService::Stub::RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::NLImage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NLImageRotateRequest, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RotateImage_, context, request, response);
}

void NLImageService::Stub::async::RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest* request, ::NLImage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NLImageRotateRequest, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RotateImage_, context, request, response, std::move(f));
}

void NLImageService::Stub::async::RotateImage(::grpc::ClientContext* context, const ::NLImageRotateRequest* request, ::NLImage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RotateImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NLImage>* NLImageService::Stub::PrepareAsyncRotateImageRaw(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NLImage, ::NLImageRotateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RotateImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NLImage>* NLImageService::Stub::AsyncRotateImageRaw(::grpc::ClientContext* context, const ::NLImageRotateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRotateImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NLImageService::Stub::MeanFilter(::grpc::ClientContext* context, const ::NLImage& request, ::NLImage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NLImage, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MeanFilter_, context, request, response);
}

void NLImageService::Stub::async::MeanFilter(::grpc::ClientContext* context, const ::NLImage* request, ::NLImage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NLImage, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MeanFilter_, context, request, response, std::move(f));
}

void NLImageService::Stub::async::MeanFilter(::grpc::ClientContext* context, const ::NLImage* request, ::NLImage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MeanFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NLImage>* NLImageService::Stub::PrepareAsyncMeanFilterRaw(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NLImage, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MeanFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NLImage>* NLImageService::Stub::AsyncMeanFilterRaw(::grpc::ClientContext* context, const ::NLImage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMeanFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

NLImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NLImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NLImageService::Service, ::NLImageRotateRequest, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NLImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NLImageRotateRequest* req,
             ::NLImage* resp) {
               return service->RotateImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NLImageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NLImageService::Service, ::NLImage, ::NLImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NLImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NLImage* req,
             ::NLImage* resp) {
               return service->MeanFilter(ctx, req, resp);
             }, this)));
}

NLImageService::Service::~Service() {
}

::grpc::Status NLImageService::Service::RotateImage(::grpc::ServerContext* context, const ::NLImageRotateRequest* request, ::NLImage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NLImageService::Service::MeanFilter(::grpc::ServerContext* context, const ::NLImage* request, ::NLImage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


