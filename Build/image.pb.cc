// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#include "image.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr NLImage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_{false},
        width_{0},
        height_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NLImage::NLImage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NLImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLImageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLImageDefaultTypeInternal() {}
  union {
    NLImage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLImageDefaultTypeInternal _NLImage_default_instance_;

inline constexpr NLImageRotateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        image_{nullptr},
        rotation_{static_cast< ::NLImageRotateRequest_Rotation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR NLImageRotateRequest::NLImageRotateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NLImageRotateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLImageRotateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLImageRotateRequestDefaultTypeInternal() {}
  union {
    NLImageRotateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLImageRotateRequestDefaultTypeInternal _NLImageRotateRequest_default_instance_;
static ::_pb::Metadata file_level_metadata_image_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_image_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_image_2eproto = nullptr;
const ::uint32_t TableStruct_image_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::NLImage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::NLImage, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::NLImage, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::NLImage, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::NLImage, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, _impl_.image_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::NLImage)},
        {12, 22, -1, sizeof(::NLImageRotateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_NLImage_default_instance_._instance,
    &::_NLImageRotateRequest_default_instance_._instance,
};
const char descriptor_table_protodef_image_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013image.proto\"E\n\007NLImage\022\r\n\005color\030\001 \001(\010\022"
    "\014\n\004data\030\002 \001(\014\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004"
    " \001(\005\"\260\001\n\024NLImageRotateRequest\0220\n\010rotatio"
    "n\030\001 \001(\0162\036.NLImageRotateRequest.Rotation\022"
    "\027\n\005image\030\002 \001(\0132\010.NLImage\"M\n\010Rotation\022\010\n\004"
    "NONE\020\000\022\016\n\nNINETY_DEG\020\001\022\022\n\016ONE_EIGHTY_DEG"
    "\020\002\022\023\n\017TWO_SEVENTY_DEG\020\0032b\n\016NLImageServic"
    "e\022.\n\013RotateImage\022\025.NLImageRotateRequest\032"
    "\010.NLImage\022 \n\nMeanFilter\022\010.NLImage\032\010.NLIm"
    "ageB\036\n\032com.neuralink.interviewingP\001b\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_image_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_image_2eproto = {
    false,
    false,
    403,
    descriptor_table_protodef_image_2eproto,
    "image.proto",
    &descriptor_table_image_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_image_2eproto::offsets,
    file_level_metadata_image_2eproto,
    file_level_enum_descriptors_image_2eproto,
    file_level_service_descriptors_image_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_image_2eproto_getter() {
  return &descriptor_table_image_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_image_2eproto(&descriptor_table_image_2eproto);
const ::google::protobuf::EnumDescriptor* NLImageRotateRequest_Rotation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_image_2eproto);
  return file_level_enum_descriptors_image_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t NLImageRotateRequest_Rotation_internal_data_[] = {
    262144u, 0u, };
bool NLImageRotateRequest_Rotation_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::NONE;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::NINETY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::ONE_EIGHTY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::TWO_SEVENTY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::Rotation_MIN;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::Rotation_MAX;
constexpr int NLImageRotateRequest::Rotation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NLImage::_Internal {
 public:
};

NLImage::NLImage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NLImage)
}
inline PROTOBUF_NDEBUG_INLINE NLImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : data_(arena, from.data_),
        _cached_size_{0} {}

NLImage::NLImage(
    ::google::protobuf::Arena* arena,
    const NLImage& from)
    : ::google::protobuf::Message(arena) {
  NLImage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, color_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:NLImage)
}
inline PROTOBUF_NDEBUG_INLINE NLImage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_(arena),
        _cached_size_{0} {}

inline void NLImage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::height_));
}
NLImage::~NLImage() {
  // @@protoc_insertion_point(destructor:NLImage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NLImage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NLImage::Clear() {
// @@protoc_insertion_point(message_clear_start:NLImage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NLImage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> NLImage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NLImage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 height = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NLImage, _impl_.height_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NLImage, _impl_.height_)}},
    // bool color = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NLImage, _impl_.color_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NLImage, _impl_.color_)}},
    // bytes data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NLImage, _impl_.data_)}},
    // int32 width = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NLImage, _impl_.width_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NLImage, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool color = 1;
    {PROTOBUF_FIELD_OFFSET(NLImage, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bytes data = 2;
    {PROTOBUF_FIELD_OFFSET(NLImage, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 width = 3;
    {PROTOBUF_FIELD_OFFSET(NLImage, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 height = 4;
    {PROTOBUF_FIELD_OFFSET(NLImage, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* NLImage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLImage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_color(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLImage)
  return target;
}

::size_t NLImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLImage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // bool color = 1;
  if (this->_internal_color() != 0) {
    total_size += 2;
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NLImage::_class_data_ = {
    NLImage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NLImage::GetClassData() const {
  return &_class_data_;
}

void NLImage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NLImage*>(&to_msg);
  auto& from = static_cast<const NLImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NLImage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NLImage::CopyFrom(const NLImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NLImage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NLImage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NLImage::InternalSwap(NLImage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NLImage, _impl_.height_)
      + sizeof(NLImage::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(NLImage, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::google::protobuf::Metadata NLImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[0]);
}
// ===================================================================

class NLImageRotateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NLImageRotateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_._has_bits_);
  static const ::NLImage& image(const NLImageRotateRequest* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::NLImage& NLImageRotateRequest::_Internal::image(const NLImageRotateRequest* msg) {
  return *msg->_impl_.image_;
}
NLImageRotateRequest::NLImageRotateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NLImageRotateRequest)
}
inline PROTOBUF_NDEBUG_INLINE NLImageRotateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

NLImageRotateRequest::NLImageRotateRequest(
    ::google::protobuf::Arena* arena,
    const NLImageRotateRequest& from)
    : ::google::protobuf::Message(arena) {
  NLImageRotateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.image_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::NLImage>(arena, *from._impl_.image_)
                : nullptr;
  _impl_.rotation_ = from._impl_.rotation_;

  // @@protoc_insertion_point(copy_constructor:NLImageRotateRequest)
}
inline PROTOBUF_NDEBUG_INLINE NLImageRotateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NLImageRotateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, image_),
           0,
           offsetof(Impl_, rotation_) -
               offsetof(Impl_, image_) +
               sizeof(Impl_::rotation_));
}
NLImageRotateRequest::~NLImageRotateRequest() {
  // @@protoc_insertion_point(destructor:NLImageRotateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NLImageRotateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.image_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NLImageRotateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NLImageRotateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.image_ != nullptr);
    _impl_.image_->Clear();
  }
  _impl_.rotation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NLImageRotateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> NLImageRotateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NLImageRotateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .NLImage image = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_.image_)}},
    // .NLImageRotateRequest.Rotation rotation = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NLImageRotateRequest, _impl_.rotation_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_.rotation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .NLImageRotateRequest.Rotation rotation = 1;
    {PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_.rotation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .NLImage image = 2;
    {PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_.image_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::NLImage>()},
  }}, {{
  }},
};

::uint8_t* NLImageRotateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLImageRotateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->_internal_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_rotation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .NLImage image = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLImageRotateRequest)
  return target;
}

::size_t NLImageRotateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLImageRotateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.image_);
  }

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->_internal_rotation() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_rotation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NLImageRotateRequest::_class_data_ = {
    NLImageRotateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NLImageRotateRequest::GetClassData() const {
  return &_class_data_;
}

void NLImageRotateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NLImageRotateRequest*>(&to_msg);
  auto& from = static_cast<const NLImageRotateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NLImageRotateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_image()->::NLImage::MergeFrom(
        from._internal_image());
  }
  if (from._internal_rotation() != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NLImageRotateRequest::CopyFrom(const NLImageRotateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLImageRotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NLImageRotateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NLImageRotateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NLImageRotateRequest::InternalSwap(NLImageRotateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_.rotation_)
      + sizeof(NLImageRotateRequest::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::google::protobuf::Metadata NLImageRotateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
